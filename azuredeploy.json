{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.24.24.22086",
      "templateHash": "13433929649313393208"
    }
  },
  "parameters": {
    "uniqueName": {
      "type": "string",
      "minLength": 4,
      "maxLength": 18
    },
    "localDeveloperId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Object ID of a developer user to be given role assignments, to allow the app to be ran locally with dependencies in Azure"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for the cluster."
      }
    },
    "repoUrl": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Build the application if points to a repo, otherwise just deploy placeholder app"
      }
    },
    "repoBranch": {
      "type": "string",
      "defaultValue": "main"
    }
  },
  "variables": {
    "blobImageContainerName": "images",
    "modelName": "gpt-35-turbo",
    "westUSModelVersion": "1106",
    "westEUModelVersion": "0301"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[format('aishop-{0}', parameters('uniqueName'))]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy-keyvault",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "uniqueName": {
            "value": "[parameters('uniqueName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "secrets": {
            "value": [
              {
                "env": "AISHOP_MONGO_CONNECTION_STR",
                "name": "cosmos-connection",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-cosmos-mongo42'), '2022-09-01').outputs.cosmosConnectionURL.value]"
              }
            ]
          },
          "objectId": {
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('aishop-{0}', parameters('uniqueName'))), '2018-11-30').principalId]"
          },
          "principalType": {
            "value": "ServicePrincipal"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "1818546547050382370"
            }
          },
          "parameters": {
            "uniqueName": {
              "type": "string",
              "minLength": 4,
              "maxLength": 18
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the cluster."
              }
            },
            "tenantId": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]",
              "metadata": {
                "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
              }
            },
            "objectId": {
              "type": "string",
              "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
              }
            },
            "principalType": {
              "type": "string",
              "allowedValues": [
                "User",
                "ServicePrincipal"
              ],
              "metadata": {
                "description": "principle type"
              }
            },
            "secrets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of secrets to store in KeyVault"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[format('aishop-{0}', parameters('uniqueName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "tenantId": "[parameters('tenantId')]",
                "enableSoftDelete": false,
                "enableRbacAuthorization": true,
                "sku": {
                  "name": "standard",
                  "family": "A"
                },
                "networkAcls": {
                  "defaultAction": "Allow",
                  "bypass": "AzureServices"
                }
              }
            },
            {
              "copy": {
                "name": "kvsecrets",
                "count": "[length(parameters('secrets'))]"
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', format('aishop-{0}', parameters('uniqueName')), parameters('secrets')[copyIndex()].name)]",
              "properties": {
                "value": "[parameters('secrets')[copyIndex()].value]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', format('aishop-{0}', parameters('uniqueName')))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', format('aishop-{0}', parameters('uniqueName')))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', format('aishop-{0}', parameters('uniqueName'))), parameters('objectId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                "principalId": "[parameters('objectId')]",
                "principalType": "[parameters('principalType')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', format('aishop-{0}', parameters('uniqueName')))]"
              ]
            }
          ],
          "outputs": {
            "keyVaultUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', format('aishop-{0}', parameters('uniqueName'))), '2022-07-01').vaultUri]"
            },
            "secretUris": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('secrets'))]",
                "input": {
                  "env": "[parameters('secrets')[copyIndex()].env]",
                  "name": "[parameters('secrets')[copyIndex()].name]",
                  "secretUri": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', format('aishop-{0}', parameters('uniqueName')), parameters('secrets')[copyIndex()].name), '2022-07-01').secretUri]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'deploy-cosmos-mongo42')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('aishop-{0}', parameters('uniqueName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy-acr",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "uniqueName": {
            "value": "[parameters('uniqueName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "managedIdentityId": {
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('aishop-{0}', parameters('uniqueName'))), '2018-11-30').principalId]"
          },
          "localDeveloperId": {
            "value": "[parameters('localDeveloperId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "1195027466833533146"
            }
          },
          "parameters": {
            "uniqueName": {
              "type": "string",
              "minLength": 4,
              "maxLength": 18
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the cluster."
              }
            },
            "acrSku": {
              "type": "string",
              "defaultValue": "Basic",
              "metadata": {
                "description": "Provide a tier of your Azure Container Registry."
              }
            },
            "managedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
              }
            },
            "localDeveloperId": {
              "type": "string",
              "metadata": {
                "description": "Id of the local developer to be added access to the storage account"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-11-01-preview",
              "name": "[format('aishop{0}', parameters('uniqueName'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('acrSku')]"
              },
              "properties": {
                "adminUserEnabled": false
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', format('aishop{0}', parameters('uniqueName')))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', format('aishop{0}', parameters('uniqueName'))), parameters('managedIdentityId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                "principalId": "[parameters('managedIdentityId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', format('aishop{0}', parameters('uniqueName')))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', format('aishop{0}', parameters('uniqueName')))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', format('aishop{0}', parameters('uniqueName'))), parameters('managedIdentityId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('managedIdentityId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', format('aishop{0}', parameters('uniqueName')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('localDeveloperId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', format('aishop{0}', parameters('uniqueName')))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', format('aishop{0}', parameters('uniqueName'))), parameters('localDeveloperId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                "principalId": "[parameters('localDeveloperId')]",
                "principalType": "User"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', format('aishop{0}', parameters('uniqueName')))]"
              ]
            }
          ],
          "outputs": {
            "acrName": {
              "type": "string",
              "metadata": {
                "description": "Output the login server property for later use"
              },
              "value": "[format('aishop{0}', parameters('uniqueName'))]"
            },
            "loginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', format('aishop{0}', parameters('uniqueName'))), '2023-11-01-preview').loginServer]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('aishop-{0}', parameters('uniqueName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy-cosmos-mongo42",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "uniqueName": {
            "value": "[parameters('uniqueName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "2421542175674469636"
            }
          },
          "parameters": {
            "uniqueName": {
              "type": "string",
              "minLength": 4,
              "maxLength": 18
            },
            "dbname": {
              "type": "string",
              "defaultValue": "az-shop",
              "metadata": {
                "description": "Name of the database to create."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the cluster."
              }
            },
            "throughput": {
              "type": "int",
              "defaultValue": 1000,
              "minValue": 400,
              "maxValue": 1000000,
              "metadata": {
                "description": "The shared throughput for the Mongo DB database"
              }
            },
            "enableFreeTier": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable free tier for Mongo DB database, not supported for some subscription types"
              }
            },
            "cosmosServerless": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Create Serverless Mongo DB database"
              }
            }
          },
          "variables": {
            "azShopCollections": [
              "products",
              "tenants"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[format('aishop-{0}', parameters('uniqueName'))]",
              "kind": "MongoDB",
              "location": "[parameters('location')]",
              "properties": {
                "enableFreeTier": "[parameters('enableFreeTier')]",
                "databaseAccountOfferType": "Standard",
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "locations": [
                  {
                    "locationName": "[parameters('location')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "apiProperties": {
                  "serverVersion": "4.2"
                },
                "capabilities": "[concat(createArray(createObject('name', 'DisableRateLimitingResponses')), if(and(not(parameters('enableFreeTier')), parameters('cosmosServerless')), createArray(createObject('name', 'EnableServerless')), createArray()))]"
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', format('aishop-{0}', parameters('uniqueName')), parameters('dbname'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('dbname')]"
                },
                "options": "[if(parameters('cosmosServerless'), null(), createObject('throughput', parameters('throughput')))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('aishop-{0}', parameters('uniqueName')))]"
              ]
            },
            {
              "copy": {
                "name": "mongoColl",
                "count": "[length(variables('azShopCollections'))]"
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}/{2}', format('aishop-{0}', parameters('uniqueName')), parameters('dbname'), variables('azShopCollections')[copyIndex()])]",
              "properties": {
                "resource": {
                  "id": "[variables('azShopCollections')[copyIndex()]]",
                  "shardKey": {
                    "partition_key": "Hash"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', format('aishop-{0}', parameters('uniqueName')), parameters('dbname'))]"
              ]
            }
          ],
          "outputs": {
            "cosmosConnectionURL": {
              "type": "string",
              "value": "[format('{0}/{1}?{2}', split(first(listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', format('aishop-{0}', parameters('uniqueName'))), '2023-04-15').connectionStrings).connectionString, '/?')[0], parameters('dbname'), split(first(listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', format('aishop-{0}', parameters('uniqueName'))), '2023-04-15').connectionStrings).connectionString, '/?')[1])]"
            },
            "cosmosAccountName": {
              "type": "string",
              "value": "[format('aishop-{0}', parameters('uniqueName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy-storage",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "uniqueName": {
            "value": "[parameters('uniqueName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "blobContainers": {
            "value": [
              {
                "name": "[variables('blobImageContainerName')]"
              }
            ]
          },
          "managedIdentityId": {
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('aishop-{0}', parameters('uniqueName'))), '2018-11-30').principalId]"
          },
          "localDeveloperId": {
            "value": "[parameters('localDeveloperId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "4961399012730136989"
            }
          },
          "parameters": {
            "uniqueName": {
              "type": "string",
              "minLength": 4,
              "maxLength": 18
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the cluster."
              }
            },
            "managedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
              }
            },
            "publicAccess": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "Blob",
                "Container"
              ],
              "metadata": {
                "description": "Blob public access settting"
              }
            },
            "blobContainers": {
              "type": "array",
              "metadata": {
                "description": "Array of Blob container names to create"
              }
            },
            "localDeveloperId": {
              "type": "string",
              "metadata": {
                "description": "Id of the local developer to be added access to the storage account"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "containers",
                "count": "[length(parameters('blobContainers'))]"
              },
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}/{2}', format('aishop{0}', parameters('uniqueName')), 'default', parameters('blobContainers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "[parameters('publicAccess')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('aishop{0}', parameters('uniqueName')), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', format('aishop{0}', parameters('uniqueName')), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('aishop{0}', parameters('uniqueName')))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[format('aishop{0}', parameters('uniqueName'))]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "Standard_LRS"
              },
              "properties": {
                "allowBlobPublicAccess": true
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('aishop{0}', parameters('uniqueName')))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', format('aishop{0}', parameters('uniqueName'))), parameters('managedIdentityId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalId": "[parameters('managedIdentityId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('aishop{0}', parameters('uniqueName')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('localDeveloperId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('aishop{0}', parameters('uniqueName')))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', format('aishop{0}', parameters('uniqueName'))), parameters('localDeveloperId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalId": "[parameters('localDeveloperId')]",
                "principalType": "User"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('aishop{0}', parameters('uniqueName')))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountName": {
              "type": "string",
              "value": "[format('aishop{0}', parameters('uniqueName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('aishop-{0}', parameters('uniqueName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy-ai",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "uniqueName": {
            "value": "[parameters('uniqueName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "modelName": {
            "value": "[variables('modelName')]"
          },
          "modelVersion": "[if(equals(parameters('location'), 'westeurope'), createObject('value', variables('westEUModelVersion')), createObject('value', variables('westUSModelVersion')))]",
          "managedIdentityId": {
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('aishop-{0}', parameters('uniqueName'))), '2018-11-30').principalId]"
          },
          "localDeveloperId": {
            "value": "[parameters('localDeveloperId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "10757041041268154314"
            }
          },
          "parameters": {
            "uniqueName": {
              "type": "string",
              "minLength": 4,
              "maxLength": 18
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the cluster."
              }
            },
            "managedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
              }
            },
            "localDeveloperId": {
              "type": "string",
              "metadata": {
                "description": "Id of the local developer to be added access to the storage account"
              }
            },
            "modelName": {
              "type": "string",
              "defaultValue": "gpt-35-turbo",
              "metadata": {
                "description": "Specifies the name of the model to deploy"
              }
            },
            "modelVersion": {
              "type": "string",
              "defaultValue": "1106",
              "metadata": {
                "description": "Specifies the version of the model to deploy, see https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-35-turbo-model-availability"
              }
            }
          },
          "variables": {
            "openAIName": "[format('aishop-{0}', parameters('uniqueName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('openAIName'), parameters('modelName'))]",
              "properties": {
                "model": {
                  "name": "[parameters('modelName')]",
                  "format": "OpenAI",
                  "version": "[parameters('modelVersion')]"
                }
              },
              "sku": {
                "name": "Standard",
                "capacity": 120
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('openAIName'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('openAIName'), 'text-embedding-ada-002')]",
              "properties": {
                "model": {
                  "name": "text-embedding-ada-002",
                  "format": "OpenAI"
                }
              },
              "sku": {
                "name": "Standard",
                "capacity": 10
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', variables('openAIName'), parameters('modelName'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('openAIName'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[variables('openAIName')]",
              "location": "[parameters('location')]",
              "kind": "OpenAI",
              "sku": {
                "name": "S0"
              },
              "properties": {
                "customSubDomainName": "[variables('openAIName')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "publicNetworkAccess": "Enabled"
              }
            },
            {
              "condition": false,
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[format('aishop-{0}', parameters('uniqueName'))]",
              "location": "[parameters('location')]",
              "kind": "FormRecognizer",
              "sku": {
                "name": "S0"
              },
              "properties": {
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "publicNetworkAccess": "Enabled"
              }
            },
            {
              "condition": false,
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[format('aishop-{0}', parameters('uniqueName'))]",
              "location": "[parameters('location')]",
              "kind": "TextTranslation",
              "sku": {
                "name": "S1"
              },
              "properties": {
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "publicNetworkAccess": "Enabled"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', variables('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', variables('openAIName')), parameters('managedIdentityId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                "principalId": "[parameters('managedIdentityId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('openAIName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('localDeveloperId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', variables('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', variables('openAIName')), parameters('localDeveloperId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                "principalId": "[parameters('localDeveloperId')]",
                "principalType": "User"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('openAIName'))]"
              ]
            }
          ],
          "outputs": {
            "openAIEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('openAIName')), '2023-05-01').endpoint]"
            },
            "openAIModel": {
              "type": "string",
              "value": "[parameters('modelName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('aishop-{0}', parameters('uniqueName')))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('repoUrl')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "buildAcrImage-linux-dapr",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "AcrName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-acr'), '2022-09-01').outputs.acrName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "gitRepositoryUrl": {
            "value": "[parameters('repoUrl')]"
          },
          "gitBranch": {
            "value": "[parameters('repoBranch')]"
          },
          "buildWorkingDirectory": {
            "value": "app/shop"
          },
          "imageName": {
            "value": "aishop/ui"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.19.5.34762",
              "templateHash": "12558611171422575177"
            },
            "name": "ACR Image Build",
            "description": "Builds a container image inside ACR from source code",
            "owner": "gordonby"
          },
          "parameters": {
            "AcrName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Container Registry"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the ACR and where to deploy the module resources to"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "How the deployment script should be forced to execute"
              }
            },
            "rbacRoleNeeded": {
              "type": "string",
              "defaultValue": "b24988ac-6180-42a0-ab88-20f7382dd24c",
              "metadata": {
                "description": "Azure RoleId that are required for the DeploymentScript resource to import images"
              }
            },
            "useExistingManagedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Does the Managed Identity already exists, or should be created"
              }
            },
            "managedIdentityName": {
              "type": "string",
              "defaultValue": "id-ContainerRegistryBuild",
              "metadata": {
                "description": "Name of the Managed Identity resource"
              }
            },
            "existingManagedIdentitySubId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "For an existing Managed Identity, the Subscription Id it is located in"
              }
            },
            "existingManagedIdentityResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "For an existing Managed Identity, the Resource Group it is located in"
              }
            },
            "initialScriptDelay": {
              "type": "string",
              "defaultValue": "30s",
              "metadata": {
                "description": "A delay before the script import operation starts. Primarily to allow Azure AAD Role Assignments to propagate"
              }
            },
            "cleanupPreference": {
              "type": "string",
              "defaultValue": "OnSuccess",
              "metadata": {
                "description": "When the script resource is cleaned up"
              },
              "allowedValues": [
                "OnSuccess",
                "OnExpiration",
                "Always"
              ]
            },
            "gitRepositoryUrl": {
              "type": "string",
              "metadata": {
                "description": "The Git Repository URL, eg. https://github.com/YOURORG/YOURREPO.git"
              }
            },
            "gitBranch": {
              "type": "string",
              "defaultValue": "main",
              "metadata": {
                "description": "The name of the repository branch to use"
              }
            },
            "buildWorkingDirectory": {
              "type": "string",
              "defaultValue": ".",
              "metadata": {
                "description": "The docker context working directory, change this when your Dockerfile and source files are ALL located in a repo subdirectory"
              }
            },
            "dockerfileDirectory": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The subdirectory relative to the working directory that contains the Dockerfile"
              }
            },
            "dockerfileName": {
              "type": "string",
              "defaultValue": "Dockerfile",
              "metadata": {
                "description": "The name of the dockerfile"
              }
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "The image name/path you want to create in ACR"
              }
            },
            "imageTag": {
              "type": "string",
              "defaultValue": "[string(dateTimeToEpoch(utcNow()))]",
              "metadata": {
                "description": "The image tag you want to create"
              }
            },
            "acrBuildPlatform": {
              "type": "string",
              "defaultValue": "linux",
              "metadata": {
                "description": "The ACR compute platform needed to build the image"
              }
            }
          },
          "variables": {
            "$fxv#0": "#!/bin/bash\nset -e\n\necho \"Waiting on RBAC replication ($initialDelay)\"\nsleep $initialDelay\n\naz acr build --resource-group $acrResourceGroup \\\n  --registry $acrName \\\n  --image $taggedImageName $repo \\\n  --file $dockerfilePath \\\n  --platform $platform",
            "repo": "[format('{0}#{1}:{2}', parameters('gitRepositoryUrl'), parameters('gitBranch'), parameters('buildWorkingDirectory'))]",
            "cleanRepoName": "[last(split(parameters('gitRepositoryUrl'), '/'))]",
            "cleanImageName": "[replace(parameters('imageName'), '/', '')]",
            "taggedImageName": "[format('{0}:{1}', parameters('imageName'), parameters('imageTag'))]",
            "dockerfilePath": "[if(not(empty(parameters('dockerfileDirectory'))), format('{0}/{1}', parameters('dockerfileDirectory'), parameters('dockerfileName')), parameters('dockerfileName'))]"
          },
          "resources": [
            {
              "condition": "[not(parameters('useExistingManagedIdentity'))]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]"
            },
            {
              "condition": "[not(empty(parameters('rbacRoleNeeded')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('AcrName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRoleNeeded'))]",
                "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('ACR-Build-{0}-{1}', variables('cleanImageName'), variables('cleanRepoName'))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]": {}
                }
              },
              "kind": "AzureCLI",
              "properties": {
                "forceUpdateTag": "[parameters('forceUpdateTag')]",
                "azCliVersion": "2.30.0",
                "timeout": "PT45M",
                "retentionInterval": "P1D",
                "environmentVariables": [
                  {
                    "name": "acrName",
                    "value": "[parameters('AcrName')]"
                  },
                  {
                    "name": "acrResourceGroup",
                    "value": "[resourceGroup().name]"
                  },
                  {
                    "name": "taggedImageName",
                    "value": "[variables('taggedImageName')]"
                  },
                  {
                    "name": "repo",
                    "value": "[variables('repo')]"
                  },
                  {
                    "name": "dockerfilePath",
                    "value": "[variables('dockerfilePath')]"
                  },
                  {
                    "name": "platform",
                    "value": "[parameters('acrBuildPlatform')]"
                  },
                  {
                    "name": "initialDelay",
                    "value": "[parameters('initialScriptDelay')]"
                  }
                ],
                "scriptContent": "[variables('$fxv#0')]",
                "cleanupPreference": "[parameters('cleanupPreference')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
                "[extensionResourceId(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))))]"
              ]
            }
          ],
          "outputs": {
            "acrImage": {
              "type": "string",
              "metadata": {
                "description": "The ACR uri the image can be accessed on if building was successful"
              },
              "value": "[format('{0}/{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), '2021-12-01-preview').loginServer, variables('taggedImageName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'deploy-acr')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy-containerapps",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "uniqueName": {
            "value": "[parameters('uniqueName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "managedIdentityId": {
            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('aishop-{0}', parameters('uniqueName')))]"
          },
          "acrName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-acr'), '2022-09-01').outputs.acrName.value]"
          },
          "acrImage": "[if(not(empty(parameters('repoUrl'))), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'buildAcrImage-linux-dapr'), '2022-09-01').outputs.acrImage.value), createObject('value', 'mcr.microsoft.com/k8se/quickstart:latest'))]",
          "kvSecretUris": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-keyvault'), '2022-09-01').outputs.secretUris.value]"
          },
          "envConfig": {
            "value": [
              {
                "name": "AISHOP_STORAGE_ACCOUNT",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-storage'), '2022-09-01').outputs.storageAccountName.value]"
              },
              {
                "name": "AISHOP_OPENAI_ENDPOINT",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-ai'), '2022-09-01').outputs.openAIEndpoint.value]"
              },
              {
                "name": "AISHOP_OPENAI_MODELNAME",
                "value": "[variables('modelName')]"
              },
              {
                "name": "AISHOP_IMAGE_CONTAINER",
                "value": "[variables('blobImageContainerName')]"
              },
              {
                "name": "PORT",
                "value": "80"
              },
              {
                "name": "AZURE_CLIENT_ID",
                "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('aishop-{0}', parameters('uniqueName'))), '2018-11-30').clientId]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "16709184045654335356"
            }
          },
          "parameters": {
            "uniqueName": {
              "type": "string",
              "minLength": 4,
              "maxLength": 18
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the cluster."
              }
            },
            "managedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "The resource id of the managed identity to be used for the container app."
              }
            },
            "acrName": {
              "type": "string",
              "metadata": {
                "description": "ACR Name for ACA"
              }
            },
            "acrImage": {
              "type": "string",
              "metadata": {
                "description": "The container name"
              }
            },
            "envConfig": {
              "type": "array",
              "metadata": {
                "description": "Environment Config"
              }
            },
            "kvSecretUris": {
              "type": "array",
              "metadata": {
                "description": "Key Vault Secret Uris"
              }
            }
          },
          "variables": {
            "acaSubnetName": "aca"
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}-net', parameters('uniqueName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/16"
                  ]
                },
                "subnets": [
                  {
                    "name": "[variables('acaSubnetName')]",
                    "properties": {
                      "addressPrefix": "10.0.1.0/27",
                      "delegations": [
                        {
                          "name": "aca",
                          "properties": {
                            "serviceName": "Microsoft.App/environments"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}-acaenv', parameters('uniqueName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "vnetConfiguration": {
                  "infrastructureSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', format('{0}-net', parameters('uniqueName')), variables('acaSubnetName'))]",
                  "internal": false
                },
                "workloadProfiles": [
                  {
                    "workloadProfileType": "Consumption",
                    "name": "Consumption"
                  }
                ],
                "zoneRedundant": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-net', parameters('uniqueName')))]"
              ]
            },
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2023-05-01",
              "name": "aishop",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('managedIdentityId'))]": {}
                }
              },
              "properties": {
                "environmentId": "[resourceId('Microsoft.App/managedEnvironments', format('{0}-acaenv', parameters('uniqueName')))]",
                "configuration": {
                  "registries": [
                    {
                      "server": "[format('{0}.azurecr.io', parameters('acrName'))]",
                      "identity": "[parameters('managedIdentityId')]"
                    }
                  ],
                  "secrets": "[map(parameters('kvSecretUris'), lambda('kvSecretUri', createObject('identity', parameters('managedIdentityId'), 'keyVaultUrl', lambdaVariables('kvSecretUri').secretUri, 'name', lambdaVariables('kvSecretUri').name)))]",
                  "ingress": {
                    "external": true,
                    "allowInsecure": true,
                    "transport": "http",
                    "targetPort": 80
                  }
                },
                "template": {
                  "containers": [
                    {
                      "image": "[parameters('acrImage')]",
                      "name": "ui",
                      "resources": {
                        "cpu": 1,
                        "memory": "2Gi"
                      },
                      "env": "[concat(parameters('envConfig'), map(parameters('kvSecretUris'), lambda('kvSecretUri', createObject('name', lambdaVariables('kvSecretUri').env, 'secretRef', lambdaVariables('kvSecretUri').name))))]"
                    }
                  ],
                  "scale": {
                    "maxReplicas": 2,
                    "minReplicas": 1
                  }
                },
                "workloadProfileName": "Consumption"
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/managedEnvironments', format('{0}-acaenv', parameters('uniqueName')))]"
              ]
            }
          ],
          "outputs": {
            "acaName": {
              "type": "string",
              "value": "aishop"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'deploy-acr')]",
        "[resourceId('Microsoft.Resources/deployments', 'buildAcrImage-linux-dapr')]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy-keyvault')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('aishop-{0}', parameters('uniqueName')))]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy-ai')]",
        "[resourceId('Microsoft.Resources/deployments', 'deploy-storage')]"
      ]
    }
  ],
  "outputs": {
    "cosmosAccountName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-cosmos-mongo42'), '2022-09-01').outputs.cosmosAccountName.value]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-storage'), '2022-09-01').outputs.storageAccountName.value]"
    },
    "openAIEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-ai'), '2022-09-01').outputs.openAIEndpoint.value]"
    },
    "openAIModel": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-ai'), '2022-09-01').outputs.openAIModel.value]"
    },
    "acrName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-acr'), '2022-09-01').outputs.acrName.value]"
    },
    "acaName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-containerapps'), '2022-09-01').outputs.acaName.value]"
    }
  }
}